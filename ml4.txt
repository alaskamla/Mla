import numpy as np

X=np.array(([2,9],[1,5],[3,6]),dtype=float)
Y=np.array(([92],[86],[89]),dtype=float)
X=X/np.amax(X,axis=0)
Y=Y/100

class NeuralNetwork(object):
    def __init__(self):
        self.inputs=2
        self.hiddens=3
        self.outputs=1
        self.w1=np.random.randn(self.inputs,self.hiddens)
        self.w2=np.random.randn(self.hiddens,self.outputs)

    def forward(self,X):
        self.z1=np.dot(X,self.w1)
        self.z2=self.sigmoid(self.z1)
        self.z3=np.dot(self.z2,self.w2)
        o=self.sigmoid(self.z3)
        return o

    def sigmoid(self,s):
        return 1/(1+np.exp(-s))

    def sigmoidprime(self,s):
        return s*(1-s)

    def backpropogation(self,X,Y,o):
        self.o_error=Y-o
        self.o_delta=self.o_error*self.sigmoidprime(o)
        self.z2_error=self.o_delta.dot(self.w2.T)
        self.z2_delta=self.z2_error*self.sigmoidprime(self.z2)
        self.w1+=l_rate*X.T.dot(self.z2_delta)
        self.w2+=l_rate*self.z2.T.dot(self.o_delta)

    def train(self,X,Y):
        o=self.forward(X)
        self.backpropogation(X,Y,o)

NN=NeuralNetwork()
l_rate=0.1
for i in range(30):
    print("Epoch :",i)
    print("Input:",str(X))
    print("Original output:",str(Y))
    print("Predicted ouutput:",str(NN.forward(X)))
    print("Loss:",np.mean(np.square(Y-NN.forward(X))))
    NN.train(X,Y)