import random
import csv
def g_o(n):
    return ('?',)*n

def s_o(n):
    return ('@',)*n

def more_general(h1,h2):
    moregeneralparts=[]
    for x,y in zip(h1,h2):
        mg=x=='?'or(x!='@' and (x==y or y=='@'))
        moregeneralparts.append(mg)
    return all(moregeneralparts)

def fullfills(example,hypo):
    return more_general(hypo,example)

def min_generalization(h,x):
    h_new=list(h)
    for i in range(len(h)):
        if not fullfills(x[i:i+1],h[i:i+1]):
            h_new[i]='?' if h[i]!='@' else x[i]
    return [tuple(h_new)]

def min_specialization(h,domains,x):
    results=[]
    for i in range(len(h)):
        if h[i]=='?':
            for val in domains[i]:
                if x[i]!=val:
                    h_new=h[:i]+(val,)+h[i+1:]
                    results.append(h_new)
        elif h[i]!='@':
            h_new=h[:i]+('@',)+h[i+1:]
            results.append(h_new)
    return results

with open('prog1dataset.csv') as csvfile:
    examples=[tuple(line) for line in csv.reader(csvfile)]

def get_domains(examples):
    d=[set() for i in examples[0]]
    for x in examples:
        for i,xi in enumerate(x):
            d[i].add(xi)
    return [list(sorted(x)) for x in d]
get_domains(examples)

def candidate_elimination(examples):
    domains=get_domains(examples)[:-1]
    G=set([g_o(len(domains))])
    S=set([s_o(len(domains))])
    i=0
    print("INitial G and S:")
    print("S[{0}]:".format(i),S)
    print("G[{0}]:".format(i),G)
    print("Preddict G and S:")

    for xcx in examples:
        i+=1
        x,cx=xcx[:-1],xcx[-1]
        if cx=='yes':
            G={g for g in G if fullfills(x,g)}
            S=generalize_S(x,G,S)
        else:
            S={s for s in S if not fullfills(x,s)}
            G=specialize_G(x,domains,G,S)
        print("G[{0}]:".format(i),G)
        print("S[{0}]:".format(i),S)
    return

def generalize_S(x,G,S):
    sprev=list(S)
    for s in sprev:
        if s not in S:
            continue
        if not fullfills(x,s):
            S.remove(s)
            splus=min_generalization(s,x)
            S.update([h for h in splus if any([more_general(g,h) for g in G])])
            S.difference_update([h for h in S if any([more_general(h,h1) for h1 in S if h!=h1])])
    return S

def specialize_G(x,domains,G,S):
    gprev=list(G)
    for g in gprev:
        if g not in G:
            continue
        if fullfills(x,g):
            G.remove(g)
            gminus=min_specialization(g,domains,x)
            G.update([h for h in gminus if any([more_general(h,s) for s in S])])
            G.difference_update([h for h in G if any([more_general(g1,h) for g1 in G if h!=g1])])
    return G
candidate_elimination(examples)